我想用tendermint实现一个给政府和事业单位使用的联盟链

在每个单位放一台服务器，作为一个tendermint节点，每个节点保存其他节点的信息，保证没有未授权的节点加入进来

在添加新节点的时候，需要每一个节点手动把新节点添加到自己的信任列表里，让它们互相之间能认识，并且互相统一时间（重要）

共识上继续使用tendermint的pos+bft，好处是速度够快，也不浪费电

使用tendermint的好处是技术比较成熟，比自己去实现要成熟得多，而且可以快速把框架搭起来，只需要自己去实现abci app的部分就可以了

abci app打算先用nodejs来实现，因为这个我比较熟，大家都比较熟，可以快速的开始

打算用nodejs的vm来实现智能合约，不知道是否可行，LSK和ASH已经实现nodejs的智能合约，按说可行性应该没问题，作为一个solidity开发者，我可以说，solidity实在是太难用了，坑多，不易调试，功能也很弱逼，都21世纪了，字符串拼接都没有

用nodejs来做智能合约的话，storage类型的数据将映射为leveldb的kv，换句话说，每个合约将直接操作自己的leveldb，降低学习成本，也降低开发成本，这样安全性会有所降低，一个bug可能就把db搞乱了，EVM里不是也有可能一个合约bug就把storage的数据搞乱吗，所以好像也没有问题，我们提供一个可查询任意区块高度的合约内db数据，也就是把区块当log重放到指定区块高度，查看当时的合约内leveldb数据，这样出错的话，可以用某些办法恢复到指定高度

该联盟链没有币，所以也没有转账一说，只有请求/响应，request即Tx，一个典型应用如下：
1.A单位把应用写成智能合约，用http给自己节点发送一个请求，数据格式json大致如下{from:A，to:0（0表示新增合约，其他值表示调用合约），data:合约代码}。这里仅限节点自己可以新增合约，有多少个节点就有多少个可以新增合约的账户
2.节点收到后进行校验，并在tendermint进行全网同步，超过2/3的节点commit即写入区块链，区块出块时间1秒，空块则不出块，每个块request数量上限1000个，超过要等下一个块，即TPS=1000。那么1秒后便能出块，这个request将永远保存在链上不可修改，这里是保存了合约代码，出块后，vm将根据合约生成对应的数据保存在leveldb
3.调用合约，用户S通过http发送数据到A单位的节点服务器，数据格式json大致如下{from:S，to:合约地址，data:请求方法名+参数}，1秒后出块，这个request将永远保存在链上不可修改，这里是保存了合约的请求信息，出块后，vm将根据请求信息把合约方法运行一遍，并把数据保存在leveldb。如果是只读信息，那么不需要出块，直接返回
4.不同的合约之间可以互相调用，比如B合约调用C合约，这里有一个问题，B合约会在所有节点运行，如果运行的节点都发起Tx同步的话，会造成通信风暴，所以解决方法是，只能B合约的创建者B单位来发起Tx同步，数据格式json大致如下{from:B，to:C，data:请求方法名+参数+回调方法名}，出块后，所有节点的vm将根据请求信息把合约方法运行一遍，并把数据保存在leveldb。如果是只读信息，为了一致性，也需要等出块后。B是通过回调获取C的数据，所以data里有回调方法名，由C合约的创建者C单位来发起Tx同步，数据格式json大致如下{from:C，to:B，data:回调方法名+参数}，出块后，B获取到了来自C的返回

合约调合约是比较复杂的过程，为了保证一致性，所有操作都必须等出块后。链本身没有什么功能（转账功能都没有），全部靠智能合约撑起所有的应用


